cancer_data <- read.csv("data.csv")
View(cancer_data)
cancer_data$id <- NULL
str(cancer_data)
cancer_data$X <- NULL
str(cancer_data)
cancer_data$diagnosis <- ifelse(cancer_data$diagnosis == "M", 1, 0)
cancer_data <- na.omit(cancer_data)
pc<-cor(cancer_data[,2:31])
corrplot.mixed(pc)
install.packages("corrplot")
corrplot.mixed(pc)
corrplot(pc)
library(corrplot)
corrplot(pc)
set.seed(123)
ind<-sample(2,nrow(cancer_data),replace=T,prob = c(0.7,0.3))
train<-survey[ind==1,]
train<-cancer_data[ind==1,]
test<-cancer_data[ind==2,]
View(test)
View(train)
View(test)
fit<-glm(diagnosis~.,family=binomial,train)
summary(fit)
fit <- glm(diagnosis ~ ., family = binomial, data = train, maxit = 1000)
summary(fit)
set.seed(123)
ind <- sample(2, nrow(cancer_data), replace = TRUE, prob = c(0.7, 0.3))
train <- cancer_data[ind == 1, ]
test <- cancer_data[ind == 2, ]
# Fit logistic regression model
model <- glm(diagnosis ~ ., family = binomial, data = train, maxit = 1000)
# Display model summary
summary(model)
# Fit logistic regression model
model <- glm(diagnosis ~ ., family = binomial, data = train, maxit = 1000000)
# Display model summary
summary(model)
# Predict on the test set
predictions <- predict(model, newdata = test, type = "response")
# Convert probabilities to binary (0 or 1) based on a threshold (e.g., 0.5)
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
# Confusion matrix
conf_matrix <- table(Actual = test$diagnosis, Predicted = predicted_classes)
conf_matrix
View(test)
fit <- glm(diagnosis~., family = binomial, data = train)
summary(fit)
library(bestglm);library(reshape2);library(corrplot)
fit <- glm(diagnosis~., family = binomial, data = train)
summary(fit)
fit <- glm(diagnosis~., family = binomial, data = train)
fit <- glm(diagnosis~., family = binomial, data = train)
fit <- glm(diagnosis~., family = binomial, data = train)
summary(fit)
View(train)
View(cancer_data)
fit<-glm(diagnosis~.,family=binomial,train)
summary(fit)
fit<-glm(diagnosis~.,family=binomial,data=train)
summary(fit)
fit<-glm(diagnosis~.,family=binomial,data=train[,2:11])
fit<-glm(diagnosis~.,family=binomial,data=train[,1:11])
summary(fit)
fit_mean<-glm(diagnosis~.,family=binomial,data=train[,1:11])
summary(fit_mean)
fit_se<-glm(diagnosis~.,family=binomial,data=train[, c(1, 11:20)])
summary(fit_mean)
summary(fit_se)
fit_se<-glm(diagnosis~.,family=binomial,data=train[, c(1, 12:21)])
summary(fit_se)
fit_worst<-glm(diagnosis~.,family=binomial,data=train[, c(1, 22:31)])
summary(fit_worst)
fit_all<-glm(diagnosis~.,family=binomial,data=train)
summary(fit_all)
exp(coef(fit_mean))
train$probs<-predict(fit_mean, type = 'response')
train$predict<-rep(1,123)
train[,1:11]$probs<-predict(fit_mean, type = 'response')
train[,1:11]$predict<-rep(1,123)
View(fit)
summary(fit)
fit<-glm(diagnosis~.,family=binomial,train)
install.packages("glmnet", repos = "https://cran.us.r-project.org")
library(glmnet)
X <- as.matrix(train[, -1])
fit <- cv.glmnet(X, as.factor(train$diagnosis), family = "binomial", alpha = 1)
summary(fit)
# Modelin katsayılarını görüntüle
coef(fit_se)
# Modelin katsayılarını görüntüle
coef(fit)
print(fit)
set.seed(123)
ind<-sample(2,nrow(cancer_data),replace=T,prob = c(0.7,0.3))
train<-survey[ind==1,]
train<-cancer_data[ind==1,]
test<-cancer_data[ind==2,]
fit<-glm(diagnosis~.,family=binomial,train)
summary(fit)
predict1<-predict(fit,test,type = "response")
predictions <- predict(model, newdata = test, type = "response")
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
conf_matrix <- table(Actual = test$diagnosis, Predicted = predicted_classes)
conf_matrix
# Predict on the train set
train_predictions <- predict(model, newdata = train, type = "response")
# Convert probabilities to binary (0 or 1) based on a threshold (e.g., 0.5)
train_predicted_classes <- ifelse(train_predictions > 0.5, 1, 0)
# Confusion matrix for the train set
train_conf_matrix <- table(Actual = train$diagnosis, Predicted = train_predicted_classes)
train_conf_matrix
conf_matrix
corrplot(pc)
library("corrplot")
corrplot(pc)
exp(coef(fit))
train_predictions <- predict(model, newdata = train, type = "response")
predictions <- predict(model, newdata = test, type = "response")
View(model)
options(repos = c(CRAN = "https://cran.r-project.org"))
#install.packages("corrplot")
library(corrplot)
cancer_data <- read.csv("data.csv")
str(cancer_data)
cancer_data <- na.omit(cancer_data)
cancer_data$id <- NULL
cancer_data$X <- NULL
cancer_data$diagnosis <- ifelse(cancer_data$diagnosis == "M", 1, 0)
model <- glm(diagnosis ~ ., family = binomial, data = train, maxit = 1000)
pc<-cor(cancer_data[,2:31])
corrplot(pc)
View(pc)
cancer_data <- read.csv("data.csv")
View(pc)
options(repos = c(CRAN = "https://cran.r-project.org"))
#install.packages("corrplot")
library(corrplot)
cancer_data <- read.csv("data.csv")
str(cancer_data)
cancer_data <- na.omit(cancer_data)
cancer_data$id <- NULL
cancer_data$X <- NULL
cancer_data$diagnosis <- ifelse(cancer_data$diagnosis == "M", 1, 0)
pc<-cor(cancer_data[,2:31])
corrplot(pc)
cancer_data$id <- NULL
cancer_data$X <- NULL
cancer_data <- na.omit(cancer_data)
str(cancer_data)
options(repos = c(CRAN = "https://cran.r-project.org"))
#install.packages("corrplot")
library(corrplot)
cancer_data <- read.csv("data.csv")
str(cancer_data)
cancer_data$id <- NULL
cancer_data$X <- NULL
cancer_data <- na.omit(cancer_data)
cancer_data$diagnosis <- ifelse(cancer_data$diagnosis == "M", 1, 0)
pc<-cor(cancer_data[,2:31])
corrplot(pc)
set.seed(123)
ind<-sample(2,nrow(cancer_data),replace=T,prob = c(0.7,0.3))
train<-cancer_data[ind==1,]
test<-cancer_data[ind==2,]
fit<-glm(diagnosis~.,family=binomial,train)
summary(fit)
predictions <- predict(fit, newdata = test, type = "response")
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
conf_matrix <- table(Actual = test$diagnosis, Predicted = predicted_classes)
conf_matrix
train_predictors <- train[, -which(names(train) == "diagnosis")]
View(train_predictors)
scaled_train <- scale(train_predictors)
pca_result <- prcomp(scaled_train, center = TRUE, scale. = TRUE)
summary(pca_result)
num_components <- choose_number_of_components(pca_result)
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
num_components <- which.max(cumulative_var >= 0.95)
selected_components <- as.matrix(predict(pca_result, newdata = scaled_train)[, 1:num_components])
train_pca <- cbind(diagnosis = train$diagnosis, selected_components)
fit_pca <- glm(diagnosis ~ ., family = binomial, data = train_pca)
# Build logistic model with principal components
fit_pca <- glm(diagnosis ~ ., family = binomial, data = as.data.frame(train_pca))
summary(fit_pca)
# Assuming 'test' is your testing dataset with predictors
test_predictors <- test[, -which(names(test) == "diagnosis")]
# Standardize the test data using the means and standard deviations from the training data
scaled_test <- scale(test_predictors, center = attr(pca_result, "center"), scale = attr(pca_result, "scale"))
test_predictors <- test[, -which(names(test) == "diagnosis")]
scaled_test <- scale(test_predictors, center = attr(pca_result, "center"), scale = attr(pca_result, "scale"))
test_predictors <- test[, -which(names(test) == "diagnosis")]
scaled_test <- scale(test_predictors, center = attr(pca_result, "center")[, 1:num_components], scale = attr(pca_result, "scale")[, 1:num_components])
predictions2 <- predict(fit_pca, newdata = test, type = "response")
predictions2 <- predict(fit_pca, newdata = train_pca, type = "response")
predictions2 <- predict(fit_pca, newdata = as.data.frame(train_pca), type = "response")
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
predicted_classes2 <- ifelse(predictions2 > 0.5, 1, 0)
conf_matrix2 <- table(Actual = train$diagnosis, Predicted = predicted_classes2)
conf_matrix
conf_matrix2
pca_predictors <- cancer_data[, -which(names(cancaer_data) == "diagnosis")]
pca_predictors <- cancer_data[, -which(names(cancer_data) == "diagnosis")]
scaled_data <- scale(pca_predictors)
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
summary(pca_result)
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
num_components <- which.max(cumulative_var >= 0.95)
selected_components <- as.matrix(predict(pca_result, newdata = scaled_data)[, 1:num_components])
train_pca <- cbind(diagnosis = train$diagnosis, selected_components)
View(train_pca)
fit_pca <- glm(diagnosis ~ ., family = binomial, data = train_pca)
fit_pca <- glm(diagnosis ~ ., family = binomial, data = as.data.frame.(train_pca)
sad
fit_pca <- glm(diagnosis ~ ., family = binomial, data = as.data.frame.(train_pca)
asd
summary(fit_pca)
scaled_data <- cbind(diagnosis = train$diagnosis, selected_components)
View(scaled_data)
fit_pca <- glm(diagnosis ~ ., family = binomial, data = as.data.frame.(scaled_data)
as.Date.default()
fit_pca <- glm(diagnosis ~ ., family = binomial, data = as.data.frame(scaled_data)
as
fit_pca <- glm(diagnosis ~ ., family = binomial, data = as.data.frame(scaled_data))
summary(fit_pca)
predictions <- predict(fit_pca, newdata = test, type = "response")
predictions <- predict(fit_pca, newdata = scaled_data, type = "response")
predictions <- predict(fit_pca, newdata = as.data.frame(scaled_data), type = "response")
predictions <- predict(fit, newdata = test, type = "response")
predictions2 <- predict(fit_pca, newdata = as.data.frame(scaled_data), type = "response")
predicted_classes2 <- ifelse(predictions2 > 0.5, 1, 0)
conf_matrix2 <- table(Actual = test$diagnosis, Predicted = predicted_classes2)
conf_matrix2 <- table(Actual = scaled_data$diagnosis, Predicted = predicted_classes2)
conf_matrix2 <- table(Actual = as.data.frame(scaled_data)$diagnosis, Predicted = predicted_classes2)
conf_matrix2
train_predictors <- train[, -which(names(train) == "diagnosis")]
scaled_train <- scale(train_predictors)
pca_result <- prcomp(scaled_train, center = TRUE, scale. = TRUE)
cumulative_var <- cumsum(pca_result$sdev^2) / sum(pca_result$sdev^2)
num_components <- which.max(cumulative_var >= 0.95)
selected_components <- as.matrix(predict(pca_result, newdata = scaled_train)[, 1:num_components])
train_pca <- cbind(diagnosis = train$diagnosis, selected_components)
test_predictors <- test[, -which(names(test) == "diagnosis")]
scaled_test <- scale(test_predictors, center = attr(pca_result, "center")[, 1:num_components], scale = attr(pca_result, "scale")[, 1:num_components])
test_predictors <- test[, -which(names(test) == "diagnosis")]
scaled_test <- scale(test_predictors, center = attr(pca_result, "center")[1:num_components], scale = attr(pca_result, "scale")[1:num_components])
scaled_test <- scale(test_predictors, center = attr(pca_result, "center")[1:num_components], scale = attr(pca_result, "scale")[1:num_components])
scaled_test <- scale(test_predictors, center = colMeans(scaled_train), scale = apply(scaled_train, 2, sd))
selected_components_test <- as.matrix(predict(pca_result, newdata = scaled_test)[, 1:num_components])
test_pca <- cbind(diagnosis = test$diagnosis, selected_components_test)
predictions_pca <- predict(fit_pca, newdata = as.data.frame(test_pca), type = "response")
predicted_classes_pca <- ifelse(predictions_pca > 0.5, 1, 0)
conf_matrix_pca <- table(Actual = test$diagnosis, Predicted = predicted_classes_pca)
conf_matrix_pca
